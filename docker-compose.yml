version: "3.8"

networks:
  kafka_network:

x-check-ports: &check-ports ./bin/check-ports:/bin/check-ports
x-service-template: &template
  restart: on-failure
  networks:
    - kafka_network
  healthcheck: &hc
    interval: 5s
    timeout: 3s
    start_period: 10s
    retries: 30
  volumes:
    - *check-ports

x-public-key: &pub >
  ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAILArDnLYVp+/JkcrJKHX5XDpFj2MdA6NmV09vh7DmVrD dind

x-private-key: &private |+
  -----BEGIN OPENSSH PRIVATE KEY-----
  b3BlbnNzaC1rZXktdjEAAAAABG5vbmUAAAAEbm9uZQAAAAAAAAABAAAAMwAAAAtzc2gtZW
  QyNTUxOQAAACCwKw5y2FafvyZHKySh1+Vw6RY9jHQOjZldPb4ew5lawwAAAJggO3ZdIDt2
  XQAAAAtzc2gtZWQyNTUxOQAAACCwKw5y2FafvyZHKySh1+Vw6RY9jHQOjZldPb4ew5laww
  AAAEA6oPfTO+faTshF1LXPJNKihyWNqL5QQejwBnFQ8UK4o7ArDnLYVp+/JkcrJKHX5XDp
  Fj2MdA6NmV09vh7DmVrDAAAAD3NwYXJrLWV4ZXJjaXNlcwECAwQFBg==
  -----END OPENSSH PRIVATE KEY-----

x-depends-on-kafka: &depends-on-kafka
  kafka:
    condition: service_healthy

services:
  manager:
    <<: *template
    image: neshkeev/bash-notebook
    hostname: &mname manager
    container_name: *mname
    command: /usr/local/bin/entrypoint
    healthcheck:
      <<: *hc
      test: /bin/check-ports 8888
    ports:
      - "8888:8888"
    depends_on:
      kafka:
        condition: service_healthy
    volumes:
      - *check-ports
      - ./bin/manager-entrypoint:/usr/local/bin/entrypoint
      - ./bin/manager.bash_aliases:/home/jovyan/.bash_aliases
      - ./work/work.ipynb:/home/jovyan/work/work.ipynb
    environment:
      KAFKA_HOST: kafka
      KAFKA_PORT: 9092
      DIND_HOST: dind
      KSQL_SERVER_HOST: ksqldb-server
      KSQL_SERVER_PORT: 8088
      KSQL_CLI_HOST: ksqldb-cli
      NOTEBOOK_ARGS: --NotebookApp.token='' --NotebookApp.password=''
      SSH_PRIVATE_KEY: *private

  dind:
    <<: *template
    image: neshkeev/dind
    hostname: &name dind
    container_name: *name
    working_dir: /${COMPOSE_PROJECT_NAME}
    command: version
    healthcheck:
      <<: *hc
      test: sh /bin/check-ports 22
    volumes:
      - *check-ports
      - /var/run/docker.sock:/var/run/docker.sock
      - .:/${COMPOSE_PROJECT_NAME}
    environment:
      SSH_PUB_KEY: *pub

  kafka:
    <<: *template
    image: confluentinc/cp-kafka:7.4.0
    hostname: &name kafka
    container_name: *name
    ports:
      - "9010:9010"
    healthcheck:
      <<: *hc
      test: /bin/check-ports 9092 19092 9010
    environment:
      CLUSTER_ID: JS-9P8KdQGG_lCVXikxM5w
      KAFKA_NODE_ID: 1

      KAFKA_PROCESS_ROLES: >
        controller,
        broker
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka:19092

      KAFKA_LISTENERS: &listeners BROKER://kafka:9092, CONTROLLER://kafka:19092
      KAFKA_ADVERTISED_LISTENERS: BROKER://kafka:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: BROKER
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: >
        BROKER:PLAINTEXT,
        CONTROLLER:PLAINTEXT

      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      EXTRA_ARGS: >
        -XX:StartFlightRecording=filename=/tmp/kafka.jfr
        -Dcom.sun.management.jmxremote
        -Dcom.sun.management.jmxremote.port=9010
        -Dcom.sun.management.jmxremote.rmi.port=9010
        -Dcom.sun.management.jmxremote.local.only=true
        -Dcom.sun.management.jmxremote.authenticate=false
        -Dcom.sun.management.jmxremote.ssl=false
        -Djava.rmi.server.hostname=127.0.0.1


  schema-registry:
    <<: *template
    image: confluentinc/cp-schema-registry:7.4.0
    hostname: &name schema-registry
    container_name: *name
    depends_on: *depends-on-kafka
    ports:
      - "8081:8081"
    healthcheck:
      <<: *hc
      test: /bin/check-ports 8081
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: kafka:9092
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081

  redpanda:
    <<: *template
    image: docker.redpanda.com/redpandadata/console:v2.2.4
    hostname: &rname redpanda
    container_name: *rname
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - "8080:8080"
    healthcheck:
      <<: *hc
      test: sh /bin/check-ports 8080
    environment:
      KAFKA_BROKERS: kafka:9092
      KAFKA_SCHEMAREGISTRY_ENABLED: true
      KAFKA_SCHEMAREGISTRY_URLS: http://schema-registry:8081

  maven:
    <<: *template
    image: maven:3-amazoncorretto-11-debian
    hostname: &name maven
    working_dir: /root/kafka-java-demo
    container_name: *name
    command: /usr/local/bin/entrypoint
    healthcheck:
      <<: *hc
      test: 'true'
    volumes:
      - ./bin/maven-entrypoint:/usr/local/bin/entrypoint
      - ./kafka-java-demo/pom.xml:/root/kafka-java-demo/pom.xml
      - ./kafka-java-demo/src:/root/kafka-java-demo/src
    environment:
      KAFKA_SCHEMA_REGISTRY: http://schema-registry:8081
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092

  ksqldb-server:
    <<: *template
    image: confluentinc/ksqldb-server:0.29.0
    hostname: &name ksqldb-server
    container_name: *name
    depends_on:
      <<: *depends-on-kafka
      schema-registry:
        condition: service_healthy
    healthcheck:
      <<: *hc
      test: /bin/check-ports 8088
    environment:
      KSQL_LISTENERS: http://0.0.0.0:8088
      KSQL_BOOTSTRAP_SERVERS: kafka:9092
      KSQL_KSQL_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      KSQL_KSQL_LOGGING_PROCESSING_STREAM_AUTO_CREATE: true
      KSQL_KSQL_LOGGING_PROCESSING_TOPIC_AUTO_CREATE: true
      KSQL_KSQL_SERVICE_ID: ksql-cluster
      KSQL_AUTO_OFFSET_RESET: earliest
      CONNECT_HOST: ksqldb-server

  ksqldb-cli:
    <<: *template
    image: confluentinc/ksqldb-cli:0.29.0
    hostname: &name ksqldb-cli
    container_name: *name
    command: sleep infinity
    depends_on:
      ksqldb-server:
        condition: service_healthy
    healthcheck:
      <<: *hc
      test: 'true'
