version: "3.8"

networks:
  kafka_network:

x-check-ports: &check-ports ./bin/check-ports:/bin/check-ports
x-service-template: &template
  restart: on-failure
  networks:
    - kafka_network
  healthcheck: &hc
    interval: 5s
    timeout: 3s
    start_period: 10s
    retries: 10
  volumes:
    - *check-ports

services:
  manager:
    <<: *template
    image: neshkeev/bash-notebook
    hostname: &name manager
    container_name: *name
    command: /usr/local/bin/entrypoint
    healthcheck:
      <<: *hc
      test: /bin/check-ports 8888
    ports:
      - "8888:8888"
    depends_on:
      kafka-active:
        condition: service_healthy
    volumes:
      - *check-ports
      - ./ssh:/home/jovyan/.ssh
      - ./bin/manager-entrypoint:/usr/local/bin/entrypoint
      - ./bin/manager.bashrc:/home/jovyan/.bashrc
      - ./src/kafka-basics.ipynb:/home/jovyan/work/kafka-basics.ipynb
      - ./src/kafka-consumer.ipynb:/home/jovyan/work/kafka-consumer.ipynb
    environment:
      KAFKA_HOST: kafka-active
      KAFKA_PORT: 9092
      KAFKA_STANDBY_HOST: kafka-standby
      KAFKA_STANDBY_PORT: 9092
      ZOOKEEPER_HOST: zoo-active
      DIND_HOST: dind
      NOTEBOOK_ARGS: --NotebookApp.token='' --NotebookApp.password=''
      RESTARTABLE: yes

  zoo-active: &zookeeper
    <<: *template
    image: zookeeper:3.8
    hostname: &name zoo-active
    container_name: *name
    healthcheck:
      <<: *hc
      test: /bin/check-ports 2181

  zoo-standby:
    << : *zookeeper
    hostname: &name zoo-standby
    container_name: *name
    networks:
      - kafka_network

  kafka-active: &broker
    <<: *template
    image: confluentinc/cp-kafka:7.4.0
    hostname: &name kafka-active
    container_name: *name
    command: bash /bin/entrypoint
    healthcheck:
      <<: *hc
      # kafka broker and ssh ports should be open
      test: /bin/check-ports 9092
    depends_on:
      zoo-active:
        condition: service_healthy
    volumes:
      - *check-ports
      - ./bin/kafka-entrypoint:/bin/entrypoint
      - ./conf/connect-log4j.properties:/usr/config/connect-log4j.properties
    environment: &broker-env
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zoo-active:2181'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_LISTENERS: PLAINTEXT://kafka-active:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-active:9092
        # MIRROR_MAKER_LOG_CONFIG: /tmp/connect-log4j.properties

  kafka-standby:
    << : *broker
    hostname: &name kafka-standby
    container_name: *name
    environment:
      << : *broker-env
      KAFKA_ZOOKEEPER_CONNECT: 'zoo-standby:2181'
      KAFKA_LISTENERS: PLAINTEXT://kafka-standby:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-standby:9092

  redpanda-active: &redpanda
    <<: *template
    image: docker.redpanda.com/redpandadata/console:v2.2.4
    hostname: &name redpanda
    container_name: *name
    depends_on:
      kafka-active:
        condition: service_healthy
    ports:
      - "8080:8080"
    healthcheck:
      <<: *hc
      test: sh /bin/check-ports 8080
    environment:
      KAFKA_BROKERS: kafka-active:9092

  redpanda-standby:
    << : *redpanda
    hostname: redpanda-standby
    container_name: redpanda-standby
    ports:
      - "18080:8080"
    environment:
      - KAFKA_BROKERS=kafka-standby:9092

  dind:
    <<: *template
    build:
      context: .
      dockerfile: local/Dockerfile_dind
    hostname: &name dind
    container_name: *name
    healthcheck:
      <<: *hc
      test: sh /bin/check-ports 2222
    privileged: true
    volumes:
      - *check-ports
      - ./docker-compose.yml:/root/${CURRENT_DIR_NAME:-kafka-exercises}/docker-compose.yml
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      CURRENT_DIR_NAME: ${CURRENT_DIR_NAME:-kafka-exercises}
